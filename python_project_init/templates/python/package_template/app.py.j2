"""Application module for {{ project_name }}."""

{% if create_api %}
from contextlib import asynccontextmanager
from typing import Any, Dict

from fastapi import FastAPI
from pydantic import BaseModel


class HealthResponse(BaseModel):
    """Health check response model."""

    status: str
    message: str
    version: str


class GreetingRequest(BaseModel):
    """Greeting request model."""

    name: str


class GreetingResponse(BaseModel):
    """Greeting response model."""

    greeting: str


class CalculationRequest(BaseModel):
    """Calculation request model."""

    a: int
    b: int


class CalculationResponse(BaseModel):
    """Calculation response model."""

    result: int
    operation: str


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan handler."""
    # Startup logic here
    print("ğŸš€ Starting {{ project_name }} API...")
    yield
    # Shutdown logic here
    print("ğŸ›‘ Shutting down {{ project_name }} API...")


app = FastAPI(
    title="{{ project_name }}",
    description="{{ description }}",
    version="0.1.0",
    lifespan=lifespan,
)


@app.get("/", response_model=HealthResponse)
async def root() -> HealthResponse:
    """Root endpoint - health check."""
    from . import __version__

    return HealthResponse(
        status="healthy",
        message="{{ project_name }} API is running!",
        version=__version__,
    )


@app.get("/health", response_model=HealthResponse)
async def health() -> HealthResponse:
    """Health check endpoint."""
    from . import __version__

    return HealthResponse(
        status="healthy",
        message="Service is healthy",
        version=__version__,
    )


@app.post("/greet", response_model=GreetingResponse)
async def greet(request: GreetingRequest) -> GreetingResponse:
    """Greet a user."""
    return GreetingResponse(greeting=f"Hello {request.name}!")


@app.post("/calculate/add", response_model=CalculationResponse)
async def add_numbers(request: CalculationRequest) -> CalculationResponse:
    """Add two numbers."""
    result = request.a + request.b
    return CalculationResponse(result=result, operation="addition")


@app.get("/info")
async def info() -> Dict[str, Any]:
    """Get application information."""
    from . import __version__

    return {
        "name": "{{ project_name }}",
        "description": "{{ description }}",
        "version": __version__,
        "endpoints": [
            {"path": "/", "method": "GET", "description": "Health check"},
            {"path": "/health", "method": "GET", "description": "Health status"},
            {"path": "/greet", "method": "POST", "description": "Greet user"},
            {"path": "/calculate/add", "method": "POST", "description": "Add numbers"},
            {"path": "/info", "method": "GET", "description": "API information"},
        ],
    }


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(
        "{{ package_name }}.app:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
    )
{% else %}
{% if entry_point %}
from __future__ import annotations

from typing import Dict, Tuple

from . import __version__

PROJECT_NAME = "{{ project_name }}"
PROJECT_DESCRIPTION = "{{ description | replace('"', '\\"') }}"


def build_greeting(name: str = "World", loud: bool = False) -> str:
    """Return a greeting message."""

    greeting = f"Hello {name}!"
    return greeting.upper() if loud else greeting


def get_application_info() -> Dict[str, str]:
    """Return basic metadata about the application."""

    return {
        "name": PROJECT_NAME,
        "description": PROJECT_DESCRIPTION,
        "version": __version__,
    }


def get_config_messages(show: bool = False) -> Tuple[str, str]:
    """Return messages to display for config command."""

    if show:
        return (
            "No configuration file found.",
            "Add your configuration logic here!",
        )

    return (
        "Configuration created!",
        "Add your configuration setup logic here!",
    )
{% else %}

def hello(name: str = "World") -> str:
    """Return a greeting message.

    Args:
        name: Name to greet

    Returns:
        Greeting message

    Example:
        >>> hello()
        'Hello World!'
        >>> hello("Alice")
        'Hello Alice!'
    """

    return f"Hello {name}!"


def add_numbers(a: int, b: int) -> int:
    """Add two numbers together.

    Args:
        a: First number
        b: Second number

    Returns:
        Sum of a and b

    Example:
        >>> add_numbers(2, 3)
        5
    """

    return a + b
{% endif %}
{% endif %}
