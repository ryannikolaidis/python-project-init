# {{ project_name }}

{{ description }}

## Features

{% if create_api %}- **FastAPI Web Application** with production-ready setup
- **Hot-reload development server** (`make run-dev`)
- **Docker support** with optimized multi-stage builds
- **Docker Compose** with PostgreSQL, Redis, and pgAdmin
- **Interactive API documentation** (Swagger UI + ReDoc)
- **Health checks** and comprehensive logging
{% elif entry_point %}- **CLI Application** with Typer framework
- **Rich terminal output** with colors and formatting
- **Interactive commands** with help and configuration
- **Global installation** support via pipx
{% else %}- **Python Library** with modern packaging
- **Reusable functions** and clean API design
{% endif %}- **Modern Python tooling** (uv, ruff, black, mypy, pytest)
- **Pre-commit hooks** for code quality
- **GitHub Actions** CI/CD workflows
- **Comprehensive testing** with coverage reports
- **Version management** with automated bumping
- **Professional project structure** following best practices

## Installation

### Development Installation

```bash
# Clone the repository
git clone https://github.com/{{ github_username }}/{{ project_name }}.git
cd {{ project_name }}

# Install dependencies
make install-dev
```

### Global Installation{% if entry_point %}

Install {{ package_name }} globally using pipx (recommended):

```bash
# Build and install globally
make install-package

# Or manually:
make build
pipx install .
```

After installation, you can use the `{{ project_name }}` command from anywhere.

### Uninstall

```bash
make uninstall-package
# Or: pipx uninstall {{ package_name }}
```{% else %}

This is a Python library. Install it in your project:

```bash
pip install -e .
```{% endif %}

## Usage

{% if create_api %}
### Development Server

```bash
# Run with hot reload (recommended)
make run-dev

# Or run uvicorn directly
uv run uvicorn {{ package_name }}.main:app --reload

# Or run the module directly
uv run python -m {{ package_name }}.main
```

### API Endpoints

- **GET /** - Health check and API info
- **GET /health** - Health status
- **POST /greet** - Greet a user
  ```json
  {"name": "Alice"}
  ```
- **POST /calculate/add** - Add two numbers
  ```json
  {"a": 5, "b": 3}
  ```
- **GET /info** - API information and available endpoints

### Interactive API Documentation

Once running, visit:
- **Swagger UI**: http://localhost:8000/docs
- **ReDoc**: http://localhost:8000/redoc

{% elif entry_point %}
```bash
# Show help
{{ project_name }} --help

# Say hello
{{ project_name }} hello
{{ project_name }} hello --name Alice
{{ project_name }} hello --name Bob --loud

# Show application info
{{ project_name }} info

# Manage configuration
{{ project_name }} config
{{ project_name }} config --show
```
{% else %}
```python
import {{ package_name }}

# Example usage
result = {{ package_name }}.hello("World")
print(result)  # "Hello World!"

sum_result = {{ package_name }}.add_numbers(2, 3)
print(sum_result)  # 5
```
{% endif %}

## Development

### Setup

```bash
# Install development dependencies
make install-dev

# Install pre-commit hooks
uv run pre-commit install
```

### Common Commands

```bash
{% if create_api %}# Run development server
make run-dev

{% endif %}# Run tests
make test

# Run linting
make lint

# Fix formatting
make tidy

# Run all checks
make check

# Build documentation
make docs

# Build and serve docs locally
make docs-serve

# Build package
make build

# Install globally
make install-package

# Bump version
make version-dev
```

### Testing

```bash
# Run tests with coverage
make test-cov
```

## Documentation

This project uses [Sphinx](https://www.sphinx-doc.org/) for documentation generation.

### Building Documentation

```bash
# Build HTML documentation
make docs

# Build and serve locally (opens in browser at http://localhost:8080)
make docs-serve

# Clean documentation build files
make clean
```

### Editing Documentation

Documentation source files live under `docs/sphinx/`:

- `docs/sphinx/index.rst` - Main documentation page
- `docs/sphinx/installation.rst` - Installation instructions
- `docs/sphinx/usage.rst` - Usage examples and tutorials
- `docs/sphinx/api.rst` - Auto-generated API reference

### GitHub Pages Deployment

Documentation is automatically built and deployed to GitHub Pages when you push to the `main` branch. The docs will be available at:

`https://{{ github_username }}.github.io/{{ project_name }}/`

To enable GitHub Pages:
1. Go to your repository Settings â†’ Pages
2. Select "GitHub Actions" as the source
3. Push to main branch to trigger the first build

{% if create_api %}## Docker

### Production

```bash
# Build and run single container
make docker-build
docker run -p 8000:8000 {{ project_name }}:latest

# Or use make target
make docker-run
```

### Development with Docker Compose

```bash
# Start all services (API + PostgreSQL + Redis + pgAdmin)
docker compose up -d

# View logs
docker compose logs -f api

# Stop all services
docker compose down
```

Services available:
- **API**: http://localhost:8000
- **pgAdmin**: http://localhost:5050 (admin@{{ project_name }}.com / admin)
- **PostgreSQL**: localhost:5432
- **Redis**: localhost:6379

{% else %}## Docker

```bash
# Build image
make docker-build

# Run container
make docker-run
```
{% endif %}

## License

MIT License - see [LICENSE](LICENSE) file for details.
